
* Assignment 1

** Problem 2

 - Find sum of logs of prime numbers b/w 1 and number ~n~
   and save it in ~prime_logs_sum~
 - Then find the logs of the ~n~
 - After that find the ratio of ~prime_logs_sum~ and ~n~


* Assignment 2

** Problem 3
- *_is_possible (num : integer)*
  - Returns True if it is possible to make a combination of
    6, 9, 20 which is equal to ~num~

  - To achieve that use loop inside loop
    #+BEGIN_SRC python
     for x in range(0, num):
       for y in range(0, num):
         for z in range(0, num):
           if (6x + 9y + 20z) == num:
             return True
     return False
    #+END_SRC

- *max_impossible (num : integer)*

  - Return the biggest number that can't be make a combination of 6, 7, 8

  - IF is_possible return True 5 time constantly

    - Then we need to find last False number

      - To achieve that we need two variables count that contain how many times num is True

      - max_num that would contain false numbers

      - Then use for loop to do other stuff


* assignment 3:

** Problem 1 a
- Use loop to check how many times key appears in target
  - Find the index of key in target
    - Add 1 into count when key found in target
  - Break loop when -1 appears
    - Return count

** Problem 2 b
- Base case
  - String is empty
    #+BEGIN_SRC python
    index = target.find(key)
    if index == -1:
      return 0
    #+END_SRC
- Recursion case
  - Return 1 + countSubStringMatchRecursive(target[len(key):])
    #+BEGIN_SRC python
    return 1 + countSubStringMatchRecursive(target[len(key):])
    #+END_SRC

** Problem 4
- *subStringMatchExactlyOneSub (target :string, key :string)*

  Find all matches of key with exactly *one* substitution

  - Remove exact matches from result
    - return them

* Assignment 8:

** Problem 2
- =greedyAdvisor (subjects: dictionary, maxWork: int, comparator: function)=

#+BEGIN_SRC python
best_subjects = {}
total_best_work = 0
#+END_SRC

- while  total_best_work < max_work
  - Find the best subject from subject dictionary
    #+BEGIN_SRC python
    best_sub = None
    for sub in subject.keys():
      if sub in best_subjects:
        continue

      if not best_sub:
        best_sub = sub

      if comparator(sub, best_sub):
        if total_best_work + subjects.get(sub)[WORK] > max_work:
          continue

        best_sub = sub
    #+END_SRC


  - Store in best_subject dictionary
    #+BEGIN_SRC python
    best_subjects[best_sub] = (subjects.get(best_sub)[VALUE], best_sub.work)
    #+END_SRC

  - update total_best_work
    #+BEGIN_SRC python
    total_best_work += best_sub.work
    #+END_SRC
